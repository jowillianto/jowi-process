module;
#include <netinet/in.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <algorithm>
#include <array>
#include <concepts>
#include <cstdio>
#include <expected>
#include <fcntl.h>
#include <ranges>
#include <string>
#include <string_view>
#include <system_error>
#include <unistd.h>
#include <vector>
export module moderna.io;
import moderna.variant_error;
namespace moderna::io {
  using system_error_unexpect_t = moderna::variant_error<std::system_error>;
  template <typename T> using system_error_expected = std::expected<T, system_error_unexpect_t>;

  /*
    Generic File Interface, if this points to a real file, it will be seekable.
  */
  template <typename file_t>
  concept generic_file_t = requires(file_t file, const file_t const_file) {
    { const_file.fd() } -> std::same_as<int>;
    { file.close() } -> std::same_as<void>;
    { const_file.file_ptr() } -> std::same_as<FILE *>;
    noexcept(const_file);
  } && std::move_constructible<file_t>;
  /*
    Readable File Interface
  */
  template <typename file_t>
  concept readable_file_t = requires(file_t file) {
    { file.read() } -> std::same_as<system_error_expected<std::string>>;
    { file.readline() } -> std::same_as<system_error_expected<std::string>>;
    { file.readlines() } -> std::same_as<system_error_expected<std::vector<std::string>>>;
    { file.is_eof() } -> std::same_as<bool>;
  };
  /*
    Writable file interface.
  */
  template <typename file_t>
  concept writable_file_t = requires(file_t file) {
    { file.write(std::declval<std::string_view>()) };
    { file.writeline(std::declval<std::string_view>()) };
  };

  auto stream_closer = [](FILE *f) { fclose(f); };
  using unique_file_ptr = std::unique_ptr<FILE, decltype(stream_closer)>;

  struct unique_fd {
    unique_fd(int fd) : __fd{fd} {}
    unique_fd(unique_fd &&o) : __fd{o.__fd} {
      o.__fd = -1;
    }
    unique_fd(unique_fd &o) = delete;
    int get() const {
      return __fd;
    }
    int release() {
      int fd = __fd;
      __fd = -1;
      return fd;
    }
    unique_fd &operator=(const unique_fd &o) = delete;
    unique_fd &operator=(unique_fd &&o) {
      if (__fd != -1) close(__fd);
      __fd = o.__fd;
      o.__fd = -1;
      return *this;
    }

    ~unique_fd() {
      if (__fd != -1) close(__fd);
    }

  private:
    int __fd;
  };

  /*
    Function to shorten open.
  */
  system_error_expected<unique_file_ptr> open_to_ptr(
    std::string_view file_path, std::string_view mode
  ) noexcept {
    auto file_ptr = fopen(file_path.data(), mode.data());
    if (file_ptr == nullptr)
      return std::unexpected{std::system_error{errno, std::system_category()}};
    else
      return unique_file_ptr{file_ptr};
  }
  system_error_expected<unique_file_ptr> open_to_ptr(int fd, std::string_view mode) noexcept {
    auto file_ptr = fdopen(fd, mode.data());
    if (file_ptr == nullptr)
      return std::unexpected{std::system_error{errno, std::system_category()}};
    else
      return unique_file_ptr{file_ptr};
  }

  export struct file_ptr_owner {
    FILE *file_ptr() const {
      return __file.get();
    }
    int fd() const {
      return fileno(__file.get());
    }
    void close() {
      __file.reset();
    }

  protected:
    unique_file_ptr __file;
    file_ptr_owner(unique_file_ptr file) : __file{std::move(file)} {}
  };

  /*
    A simple structure representing a readable file.
  */
  export struct readable_file : virtual public file_ptr_owner {
    /*
      Reads the whole file into a std::string. Give a template argument buffer_size to control
      the buffer size to use.
    */
    template <size_t buffer_size = 4096> system_error_expected<std::string> read() {
      std::array<char, buffer_size + 1> buf;
      std::string full_buf;
      while (true) {
        size_t read_count = fread(buf.data(), sizeof(char), buffer_size, __file.get());
        buf[read_count] = 0;
        full_buf.append(buf.data());
        if (read_count != buffer_size && feof(__file.get()) != 0) {
          break;
        } else if (read_count != buffer_size && ferror(__file.get()) != 0) {
          return std::unexpected{std::system_error{ferror(__file.get()), std::system_category()}};
        } else if (read_count != buffer_size) {
          break;
        }
      }
      return full_buf;
    }
    /*
      Reads n characters into the stream. Use the buffer size to control the amount to read.
    */
    template <size_t buffer_size = 4096>
    system_error_expected<std::string> read_n(size_t byte_count) {
      std::array<char, buffer_size + 1> buf;
      std::string full_buf;
      full_buf.reserve(buffer_size);
      while (byte_count != 0) {
        size_t read_amount = byte_count > buffer_size ? buffer_size : byte_count;
        size_t read_count = fread(buf.data(), sizeof(char), read_amount, __file.get());
        buf[read_count] = 0;
        if (read_count < read_amount && feof(__file.get()) != 0) {
          break;
        } else if (read_count < read_amount && ferror(__file.get()) != 0) {
          return std::unexpected{std::system_error{ferror(__file.get()), std::system_category()}};
        }
        byte_count -= read_count;
        full_buf.append(buf.data());
      }
      return full_buf;
    }
    /*
      Reads the whole file into memory and additionally parses them into lines.
    */
    template <size_t buffer_size = 4096>
    system_error_expected<std::vector<std::string>> readlines() {
      std::array<char, buffer_size> buf;
      std::vector<std::string> newline_split;
      std::string str_buf;
      while (true) {
        char *ptr = fgets(buf.data(), buffer_size, __file.get());
        str_buf.append(buf.data());
        if (ptr == nullptr && ferror(__file.get())) {
          return std::unexpected{std::system_error{ferror(__file.get()), std::generic_category()}};
        } else if (feof(__file.get()) != 0) {
          newline_split.emplace_back(str_buf);
          break;
        } else if (std::string_view{ptr}.back() == '\n') {
          newline_split.emplace_back(std::move(str_buf));
        }
      }
      return newline_split;
    }
    /*
      Read one line into memory.
    */
    template <size_t buffer_size = 4096> system_error_expected<std::string> readline() {
      std::array<char, buffer_size> buf;
      std::string str_buf;
      while (true) {
        char *ptr = fgets(buf.data(), buffer_size, __file.get());
        str_buf.append(buf.data());
        if (ptr == nullptr && ferror(__file.get())) {
          return std::unexpected{std::system_error{ferror(__file.get()), std::generic_category()}};
        } else if (feof(__file.get()) != 0) {
          break;
        } else if (std::string_view{ptr}.back() == '\n') {
          break;
        }
      }
      return str_buf;
    }

    static system_error_expected<readable_file> open(std::string_view file_path) noexcept {
      return open_to_ptr(file_path, "r").transform([](auto file_ptr) {
        return readable_file{std::move(file_ptr)};
      });
    }
    static system_error_expected<readable_file> open(int fd) noexcept {
      return open_to_ptr(fd, "r").transform([](auto file_ptr) {
        return readable_file{std::move(file_ptr)};
      });
    }

  protected:
    readable_file(unique_file_ptr file) noexcept : file_ptr_owner(std::move(file)) {}
    readable_file() noexcept : file_ptr_owner(nullptr) {}
  };
  /*
    A simple structure representing a writable file.
  */
  export struct writable_file : virtual public file_ptr_owner {
    /*
      writes into the file.
    */
    system_error_expected<void> write(std::string_view v) {
      size_t write_count = fwrite(v.data(), sizeof(char), v.length(), __file.get());
      if (write_count != v.length()) {
        return std::unexpected{std::system_error{ferror(__file.get()), std::system_category()}};
      }
      return {};
    }
    /*
      writes a line into the file. automatically append \n
    */
    system_error_expected<void> writeline(std::string_view v) {
      return write(v).and_then([this]() { return write("\n"); });
    }
    template <std::ranges::range container_t>
      requires(std::constructible_from<std::string_view, std::ranges::range_value_t<container_t>>)
    system_error_expected<void> writelines(const container_t &lines) {
      return __recursive_writer<container_t>(std::ranges::begin(lines), std::ranges::end(lines));
    }

    static system_error_expected<writable_file> open(std::string_view file_path) noexcept {
      return open_to_ptr(file_path, "w").transform([](auto file_ptr) {
        return writable_file{std::move(file_ptr)};
      });
    }
    static system_error_expected<writable_file> open(int fd) noexcept {
      return open_to_ptr(fd, "w").transform([](auto file_ptr) {
        return writable_file{std::move(file_ptr)};
      });
    }

  protected:
    writable_file() noexcept : file_ptr_owner(nullptr) {}
    writable_file(unique_file_ptr file) noexcept : file_ptr_owner(std::move(file)) {}

  private:
    template <std::ranges::range container_t>
      requires(std::convertible_to<std::ranges::range_value_t<container_t>, std::string_view>)
    system_error_expected<void> __recursive_writer(
      decltype(std::declval<const container_t &>().begin()) begin,
      decltype(std::declval<const container_t &>().end()) end
    ) {
      return writeline(*begin).and_then([&]() {
        if (begin != end) return __recursive_writer<container_t>(begin + 1, end);
        else
          return system_error_expected<void>{};
      });
    }
  };

  export struct pipe {
    readable_file r;
    writable_file w;

    static system_error_expected<pipe> open() noexcept {
      int pipefd[2];
      if (::pipe(pipefd) == -1)
        return std::unexpected{std::system_error{errno, std::system_category()}};
      return readable_file::open(pipefd[0]).and_then([&](auto r) {
        return writable_file::open(pipefd[1]).transform([&](auto w) mutable {
          return pipe{std::move(r), std::move(w)};
        });
      });
    }
  };

  /*
    Read and writable file.
  */
  export struct rw_file : public readable_file, public writable_file {
    static system_error_expected<rw_file> open(std::string_view file_path) noexcept {
      return open_to_ptr(file_path, "a+").transform([](auto file_ptr) {
        return rw_file{std::move(file_ptr)};
      });
    }
    static system_error_expected<rw_file> open(int fd) noexcept {
      return open_to_ptr(fd, "a+").transform([](auto file_ptr) {
        return rw_file{std::move(file_ptr)};
      });
    }

  private:
    rw_file(unique_file_ptr file) noexcept : file_ptr_owner(std::move(file)) {}
  };

  /*
    A writable file in the filesystem.
  */
  export template <generic_file_t file_t> struct fs_file : public file_t {
    system_error_expected<void> seek(long offset, int origin) {
      if (fseek(file_t::file_ptr().get(), offset, origin) != 0)
        return std::unexpected{std::system_error{errno, std::generic_category()}};
      return {};
    }
    system_error_expected<long> tell() {
      long pos = ftell(file_t::file_ptr());
      if (pos == static_cast<long>(-1))
        return std::unexpected{std::system_error{errno, std::generic_category()}};
      return pos;
    }
    fs_file(file_t file) : file_t{std::move(file)} {}
  };

  export struct socket_file {
    socket_file(rw_file file, struct sockaddr_in addr) : io{std::move(file)}, address{addr} {}
    struct sockaddr_in address;
    rw_file io;
    static system_error_expected<socket_file> from_fd(unique_fd fd, struct sockaddr_in addr) {
      // int flags = fcntl(fd.get(), F_GETFL, 0);
      // if (flags == -1) return std::unexpected{std::system_error{errno, std::generic_category()}};
      // if (fcntl(fd.get(), F_SETFL, flags | O_NONBLOCK) == -1)
      //   return std::unexpected{std::system_error{errno, std::generic_category()}};
      return rw_file::open(fd.release()).transform([&](auto &&f) {
        return socket_file{std::move(f), addr};
      });
    }
  };
  /*
    A Socket
  */
  export struct listener_sock_file {
    static system_error_expected<unique_fd> create_socket(
      int domain = AF_INET, int type = SOCK_STREAM, int protocol = 0
    ) {
      int sockfd = socket(domain, type, protocol);
      if (sockfd == -1) return std::unexpected{std::system_error{errno, std::generic_category()}};
      return unique_fd{sockfd};
    }
    static system_error_expected<unique_fd> bind_socket(
      unique_fd fd, const struct sockaddr *addr, socklen_t addrlen
    ) {
      int status = bind(fd.get(), addr, addrlen);
      if (status == -1) return std::unexpected{std::system_error{errno, std::generic_category()}};
      return std::move(fd);
    }
    static system_error_expected<listener_sock_file> create(
      unique_fd fd, struct sockaddr_in address, int backlog
    ) {
      int status = listen(fd.get(), backlog);
      if (status == -1) return std::unexpected{std::system_error{errno, std::generic_category()}};
      return listener_sock_file(std::move(fd), address);
    }

    static system_error_expected<listener_sock_file> create_tcp_listener(int port, int backlog) {
      struct sockaddr_in address;
      socklen_t addrlen = sizeof(address);
      return create_socket()
        .and_then([&](auto &&fd) {
          address.sin_family = AF_INET;
          address.sin_addr.s_addr = INADDR_ANY;
          address.sin_port = htons(port);
          return bind_socket(std::move(fd), reinterpret_cast<struct sockaddr *>(&address), addrlen);
        })
        .and_then([&](auto &&fd) { return create(std::move(fd), address, backlog); });
    }

    system_error_expected<socket_file> accept() const noexcept {
      struct sockaddr_in address;
      socklen_t addrlen = sizeof(address);
      int accept_fd =
        ::accept(__file.get(), reinterpret_cast<struct sockaddr *>(&address), &addrlen);
      if (accept_fd == -1)
        return std::unexpected{std::system_error{errno, std::generic_category()}};
      return socket_file::from_fd(unique_fd{accept_fd}, address);
    }

  private:
    unique_fd __file;
    struct sockaddr_in __address;

  protected:
    listener_sock_file(unique_fd file, struct sockaddr_in address) :
      __file(std::move(file)), __address{address} {}
  };
}