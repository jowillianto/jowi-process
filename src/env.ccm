module;
#include <cassert>
#include <optional>
#include <iostream>
#include <map>
#include <ranges>
#include <vector>
#include <format>
#include <string>
#include <string_view>
export module moderna.process:env;

namespace moderna::process {
  /*
    environment object for managing environment variables. environment variables are considered
    to be immutable and should never in any instance be use for communicating between threads
    as it is not thread safe.
  */
  export struct env {
  public:
    /*
      Constructs the environment variable from a bunch of envvars.
    */
    env(const char **env_vars) {
      const char **env_beg = env_vars;
      while (env_beg != nullptr && *env_beg != nullptr) {
        auto env_line = std::string_view{*env_beg};
        auto sep_pos = env_line.find('=');
        _env_vars.emplace(
          std::string{env_line.begin(), env_line.begin() + sep_pos},
          std::string{env_line.begin() + sep_pos + 1, env_line.end()}
        );
        env_beg += 1;
      }
    }
    /*
      Returns the associated value for an environment variable.
    */
    std::optional<std::string_view> operator[](std::string_view env_name) const {
      auto it = _env_vars.find(env_name);
      if (it == _env_vars.end()) return std::nullopt;
      return it->second;
    }
    /*
      Returns the size of the environment variable. This will either insert a new one or edit an
      existing one. This call is not compatible with the POSIX getenv or setenv call. This call
      returns the old value if replaced or empty if a new entry is created
    */
    std::optional<std::string> set_env(std::string_view env_name, std::string_view env_value) {
      /*
        Since this is an insertion, the inputs should be validated
      */
      assert(_is_valid_env_value_or_key(env_name));
      assert(_is_valid_env_value_or_key(env_value));
      auto it = _env_vars.find(env_name);
      auto value = std::string{env_value.begin(), env_value.end()};
      _clear_serialized();
      if (it == _env_vars.end()) {
        _env_vars.emplace(std::string{env_name.begin(), env_name.end()}, std::move(value));
        return std::nullopt;
      } else {
        (it->second).swap(value);
        return std::move(value);
      }
    }
    /*
      This function is provided only so that there is a common getter and setter interface
    */
    std::optional<std::string_view> get_env(std::string_view env_name) const {
      return (*this)[env_name];
    }
    size_t size() const {
      return _env_vars.size();
    }
    const char *const *to_c_style_arr() const {
      if (_serialized_char.size() == 0) _serialize();
      return _serialized_char.data();
    }

  private:
    std::map<std::string, std::string, std::less<>> _env_vars;
    mutable std::vector<std::string> _serialized;
    mutable std::vector<const char *> _serialized_char;

    void _clear_serialized() const {
      _serialized.clear();
      _serialized_char.clear();
    }

    bool _is_valid_env_value_or_key(std::string_view value) const {
      return std::ranges::find(value, '=') == value.end();
    }

    void _serialize() const {
      _serialized.reserve(_env_vars.size());
      _serialized_char.reserve(_env_vars.size() + 1);
      std::ranges::copy(
        _env_vars |
          std::ranges::views::transform([](const std::pair<const std::string, std::string> &p) {
            return std::format("{}={}", p.first, p.second);
          }),
        std::back_inserter(_serialized)
      );
      std::ranges::copy(
        _serialized | std::ranges::views::transform([](const std::string &s) { return s.data(); }),
        std::back_inserter(_serialized_char)
      );
      _serialized_char.emplace_back(nullptr);
    }

    /*
      Now for the global env control
    */
    static std::optional<env> _global_env;

  public:
    /*
      Get the global variable.
    */
    static const std::optional<env> &get_global() {
      return _global_env;
    }
    /*
      Initialize the global environment
    */
    static void init_global(const char **env_var) {
      _global_env.emplace(env{env_var});
    }
    /*
      If the global variable is not initialized, this will not throw an error but instead
      derive its variable as if it is derived from an empty global.
    */
    static env from_global() {
      auto env_vars = env{nullptr};
      if (_global_env.has_value()) env_vars._env_vars = _global_env.value()._env_vars;
      else
        std::cerr << "WARNING : Global ENV has not been initialized\n";
      return env_vars;
    }
  };
  std::optional<env> env::_global_env = std::nullopt;
}