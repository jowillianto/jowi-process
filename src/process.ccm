module;
#include <sys/mman.h>
#include <sys/signal.h>
#include <sys/wait.h>
#include <cassert>
#include <concepts>
#include <csignal>
#include <expected>
#include <optional>
#include <spawn.h>
#include <system_error>
#include <unistd.h>
export module moderna.process;
import moderna.variant_error;
export import :argument;
export import :env;
export import :result;
namespace moderna {
  template <typename F, typename... Args>
    requires(std::invocable<F, Args...>)
  std::expected<void, std::system_error> invoke_sys_call_returning_err_code(
    F &&sys_call, Args &&...args
  ) {
    int err_no = std::invoke(std::forward<F>(sys_call), std::forward<Args>(args)...);
    if (err_no != 0) return std::unexpected{std::system_error{err_no, std::generic_category()}};
    return {};
  }
  template <typename F, typename... Args>
  std::expected<void, std::system_error> invoke_sys_call(F &&sys_call, Args &&...args) {
    if (std::invoke(std::forward<F>(sys_call), std::forward<Args>(args)...) == -1)
      return std::unexpected{std::system_error{errno, std::generic_category()}};
    return {};
  }

  export struct process_result_error {
    process_result result;
    std::string_view what() const noexcept {
      return "status return code is not 0";
    }
  };

  /*
    A RAII based subprocess running that will release resources on exit, this will be done by
    either waiting on the process or killing the process. Not a threadsafe class, do not call
    modifying functions from two threads.
  */
  export struct subprocess {
    using wait_unexpect_t = moderna::variant_error<std::system_error, process_result_error>;
    /*
      Create and run a process
    */
    template <process::argument_t arg_t>
    subprocess(
      const arg_t &args,
      int stdout = 0,
      int stdin = 1,
      int stderr = 2,
      const process::env &env = process::env::from_global()
    ) :
      subprocess(spawn(args, stdout, stdin, stderr, env).value()) {}
    subprocess(subprocess &&o) {
      this->_pid = o._pid;
      o._pid = -1;
    }

    /*
      This process is guaranteed to not throw, but however should not be called if the
      process has been waited for.
    */
    std::expected<void, std::system_error> send_signal(int sig_num) const noexcept {
      return invoke_sys_call(::kill, _pid, sig_num);
    }
    /*
      wait for the child in a non blocking manner. This call will modify the process object.
      If the process has been waited for before, this will return empty.
    */
    std::expected<std::optional<process_result>, wait_unexpect_t> wait_non_blocking() noexcept {
      int status = 0;
      int wait_status = waitpid(_pid, &status, WNOHANG);
      // Fail called
      if (wait_status == -1)
        return std::unexpected{wait_unexpect_t{std::system_error{errno, std::generic_category()}}};
      // process has not changed state
      else if (wait_status == 0)
        return std::nullopt;
      auto result = process_result{status};
      if (result.is_exit_normal()) return result;
      else
        return std::unexpected{wait_unexpect_t{process_result_error{result}}};
    }
    /*
      waits for the child to finish execution and finish
    */
    std::expected<process_result, wait_unexpect_t> wait() {
      int status = 0;
      return invoke_sys_call(waitpid, _pid, &status, 0)
        .transform_error([](auto &&e) { return wait_unexpect_t{e}; })
        .and_then([&]() {
          auto result = process_result{status};
          if (result.is_exit_normal())
            return std::expected<process_result, wait_unexpect_t>{result};
          else
            return std::expected<process_result, wait_unexpect_t>{
              std::unexpected{wait_unexpect_t{process_result_error{result}}}
            };
        });
    }
    /*
      Kill a process. The outcome of this function is the same as calling
      send_signal (9).
      throws :
      std::system_error
      thread_plus::process::process_error<thread_plus::process::process_error_code::PROCESS_IS_DEAD>
    */
    std::expected<void, std::system_error> kill() {
      /*
        Sends a sigkill signal. send_signal will handle SIGKILL
      */
      return send_signal(SIGKILL);
    }

    /*
      Returns if the current process is waitable. Takes an additional argument that specifies the
      memory order for checking.
    */
    bool waitable() const {
      return _pid != -1;
    }

    ~subprocess() {
      /*
        We have to kill over here because calling wait() can cause a process to wait indefinitely
        without killing if the child runs indefinitely. In order to prevent such a case from
        happening. A RAII class has to kill the child.
      */
      if (waitable()) {
        auto _ = kill()
                   .transform_error([](auto &&e) {
                     return wait_unexpect_t{e};
                   })
                   .and_then([this]() { return wait(); });
      }
    }

    /*
      Returns the pid for the process.
    */
    const pid_t &pid() const {
      return _pid;
    }

    /*
      Disallow copying (this breaks the system), the pid should only be owned by one object.
    */
    subprocess &operator=(const subprocess &o) = delete;
    subprocess &operator=(subprocess &&o) {
      this->_pid = o._pid;
      o._pid = -1;
      return *this;
    }

    template <moderna::process::argument_t arg_t>
    static std::expected<subprocess, std::system_error> spawn(
      const arg_t &args,
      int stdout = 0,
      int stdin = 1,
      int stderr = 2,
      const process::env &env = process::env::from_global()
    ) {
      posix_spawn_file_actions_t spawn_action;
      posix_spawnattr_t attributes;
      pid_t pid;
      return invoke_sys_call_returning_err_code(posix_spawn_file_actions_init, &spawn_action)
        .and_then([&]() {
          return invoke_sys_call_returning_err_code(
            posix_spawn_file_actions_adddup2, &spawn_action, stdout, STDOUT_FILENO
          );
        })
        .and_then([&]() {
          return invoke_sys_call_returning_err_code(
            posix_spawn_file_actions_adddup2, &spawn_action, stdin, STDIN_FILENO
          );
        })
        .and_then([&]() {
          return invoke_sys_call_returning_err_code(
            posix_spawn_file_actions_adddup2, &spawn_action, stderr, STDERR_FILENO
          );
        })
        .and_then([&]() {
          return invoke_sys_call_returning_err_code(posix_spawnattr_init, &attributes);
        })
        .and_then([&]() {
          return invoke_sys_call_returning_err_code(
            posix_spawnp,
            &pid,
            args.command(),
            &spawn_action,
            &attributes,
            const_cast<char *const *>(args.arguments()),
            const_cast<char *const *>(env.to_c_style_arr())
          );
        })
        .transform([&]() { return subprocess{pid}; });
    }
    template <moderna::process::argument_t arg_t>
    static std::expected<process_result, wait_unexpect_t> run(
      const arg_t &args,
      int stdout = 0,
      int stdin = 1,
      int stderr = 2,
      const process::env &env = process::env::from_global()
    ) {
      return spawn(args, stdout, stdin, stderr, env)
        .transform_error([](auto &&e) { return wait_unexpect_t{e}; })
        .and_then([](auto &&p) { return p.wait(); });
    }

  private:
    pid_t _pid;
    subprocess(pid_t pid) : _pid{pid} {
      assert(_pid != -1);
    }
  };
};